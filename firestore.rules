rules_version = '2';
function isSignedIn(){ return request.auth != null; }
function myRole(){ return isSignedIn() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : null; }
function isStaff(){ return ['owner','admin','instructor','ta'].hasAny([myRole()]); }
service cloud.firestore {
  match /databases/{database}/documents {
    match /courses/{id}{ allow read: if true; allow create,update,delete: if isStaff(); }
    match /users/{uid}{ allow read: if isSignedIn() && request.auth.uid==uid || isStaff(); allow create: if isSignedIn() && request.auth.uid==uid; allow update: if isSignedIn() && request.auth.uid==uid || isStaff(); }
    match /enrollments/{id}{ allow create: if isSignedIn() && request.resource.data.userId==request.auth.uid; allow read: if isStaff() || (isSignedIn() && request.auth.uid==resource.data.userId); allow update,delete: if isStaff() || (isSignedIn() && request.auth.uid==resource.data.userId); }
    match /attempts/{id}{ allow create: if isSignedIn() && request.resource.data.userId==request.auth.uid; allow read: if isStaff() || (isSignedIn() && request.auth.uid==resource.data.userId); allow update,delete: if isStaff(); }
    match /certificates/{id}{ allow create: if isSignedIn() && request.resource.data.userId==request.auth.uid; allow read: if isSignedIn() && (request.auth.uid==resource.data.userId || isStaff()); allow update,delete: if isStaff(); }
  }
}
